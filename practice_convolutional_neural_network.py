# -*- coding: utf-8 -*-
"""Copy of convolutional_neural_network.ipynb

Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1CoXTKMD6z8AxNAyR_Ud6Z_uP9uHNX9Pa
# Convolutional Neural Network
"""

import tensorflow as tf
#image preprosseing keras lib
from keras.preprocessing.image import ImageDataGenerator

print(tf.__version__)

"""### Preprocessing the Training set"""

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
training_set = train_datagen.flow_from_directory(
        'dataset/training_set',
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

"""### Preprocessing the Test set"""

test_datagen = ImageDataGenerator(rescale=1./255)
testing_set = test_datagen.flow_from_directory(
        'dataset/test_set',
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

"""
### Initialising the CNN
"""

cnn = tf.keras.models.Sequential()

"""Convolution"""

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_siz3=3, activation='relu', input_shape=[64,64,3]))

"""Pooling"""

cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

"""Adding a second convolutional layer"""

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_siz3=3, activation='relu'))

cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

"""Flattening"""

cnn.add(tf.keras.Flatten())

"""Full Connection"""

cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

#output layer
cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

"""Training the CNN"""

cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""### Training the CNN on the Training set and evaluating it on the Test set"""

cnn.fit(x = training_set, validation_data = testing_set, epochs = 25)

"""##Making a single prediction"""

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('dataset/single_prediction/cat_or_dog_3.jpg', target_size=(64,64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0) #batch  dimension
result = cnn.predict(test_image)
training_set.class_indices
if result[0][0] == 1:
  prediction = 'dog'
else:
  prediction = 'cat'#getting prediction from batch

print(prediction)
